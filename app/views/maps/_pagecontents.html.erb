<% if @polystr %>
  <%= @polystr %>
<% end %>

<input value="included space" type="button" onclick="layerName='includedSpace';
                            drawingManager.polygonOptions.fillColor = '#ffff00';
                            drawingManager.polygonOptions.fillOpacity = 0.15;"/>
<input value="excluded space" type="button" onclick="layerName='exclusionSpace';
                            drawingManager.polygonOptions.fillColor = '#ff00ff';
                            drawingManager.polygonOptions.fillOpacity = 0.7;"/>

<div style='width: 800px;'>
  <div id="mapspace" style='width: 800px; height: 400px;'></div>
</div>
<form id="launcherator">
  <input type="submit" value="submit shapes">
</form>

<div id="center">center of map: _</div>
<div id="results">points: _</div>
<div id="bounds">bounds: _</div>
<div id="bounds-local">local bounds: _</div>
<div id="local-coords">local coords: _</div>

<script>

// snippet from http://tutorialspots.com/google-maps-javascript-api-v3-method-polygon-getbounds-515.html
if (!google.maps.Polygon.prototype.getBounds) {
  google.maps.Polygon.prototype.getBounds=function(){
      var bounds = new google.maps.LatLngBounds()
      this.getPath().forEach(function(element,index){bounds.extend(element)})
      return bounds
  }
}

function initialize() {
  shapes = new Array();
  exclusionShapes = new Array();

  // includeShapesToDraw = $('.include_information').data().included
  // excludeShapesToDraw = $('.exclude_information').data().excluded
  layerName = "includedSpace";

  // includeShapesToDraw.forEach(function(shape) {shapes.push(shape.coordinates)})
  // excludeShapesToDraw.forEach(function(exclShape) {exclusionShapes.push(exclShape.coordinates)})

  var mapOptions = {
    center: new google.maps.LatLng(26.555480, -80.075526),
    zoom: 21,
    mapTypeId: google.maps.MapTypeId.SATELLITE
  };

  map = new google.maps.Map(document.getElementById('mapspace'),
    mapOptions);

  drawingManager = new google.maps.drawing.DrawingManager({
    drawingMode: google.maps.drawing.OverlayType.POLYGON,
    drawingControl: true,
    drawingControlOptions: {
      position: google.maps.ControlPosition.TOP_CENTER,
      drawingModes: [
        google.maps.drawing.OverlayType.POLYGON
      ]
    },
    polygonOptions: {
      fillColor: '#ffff00',
      fillOpacity: 0.15,
      strokeWeight: 5,
      clickable: false,
      editable: true,
      zIndex: 1
    }
  });
  drawingManager.setMap(map);


  // shapes.forEach(function(shape) {
  //   console.log(shape)
  //   console.log('incShp')
  //   shapeCoords = []
  //   shape.forEach(function(coord) {
  //     shapeCoords.push(new google.maps.LatLng(coord[0],coord[1]))
  //   })

  //   // Construct the polygon.
  //   includedDraw = new google.maps.Polygon({
  //     paths: shapeCoords,
  //     editable: true,
  //     strokeWeight: 1,
  //     fillColor: '#ffff00',
  //     fillOpacity: 0.15
  //   });

  //   includedDraw.setMap(map);

  // })

  // exclusionShapes.forEach(function(exShape) {
  //   console.log(exShape)
  //   console.log('exclshp')
  //   exclShapeCoords = []
  //   exShape.forEach(function(coord) {
  //     exclShapeCoords.push(new google.maps.LatLng(coord[0],coord[1]))
  //   })

  //   // Construct the polygon.
  //   excludedDraw = new google.maps.Polygon({
  //     paths: exclShapeCoords,
  //     editable: true,
  //     strokeWeight: 2,
  //     fillColor: '#ff00ff',
  //     fillOpacity: 0.7
  //   });

  //   excludedDraw.setMap(map);

  // })

  google.maps.event.addListener(drawingManager, 'overlaycomplete', function(event) {
    mapCenter = map.center
    thing = event
    console.log(drawingManager.polygonOptions)
    bounds = thing.overlay.getBounds()
    origin = bounds.getSouthWest()
    shapeLatLngs = event.overlay.getPaths().getArray()[0].getArray()

    shapeArr = []
    shapeCoordsArr = []

    function arrayCoordPairs(point) {return [point.lat(), point.lng()] }

    shapeLatLngs.forEach(function(latLng){shapeArr.push(arrayCoordPairs(latLng))})

    slarr = {points:shapeArr,name:layerName}
    if (slarr['name'] == 'includedSpace') {
      shapes.push(slarr['points'])
    } else {
      exclusionShapes.push(slarr['points'])
    };

    function getXdistance(point) {
      b = new google.maps.LatLng(origin.lat(), point.lng())
      return google.maps.geometry.spherical.computeDistanceBetween(origin,b)
    }

    function getYdistance(point) {
      b = new google.maps.LatLng(point.lat(), origin.lng())
      return google.maps.geometry.spherical.computeDistanceBetween(origin,b)
    }

    function pointCoords(point) {
      x = getXdistance(point)
      y = getYdistance(point)
      return [x, y]
    }

    function boundsXDist(bounds) {
      b = new google.maps.LatLng(bounds.getSouthWest().ob, bounds.getNorthEast().pb)
      return google.maps.geometry.spherical.computeDistanceBetween(origin,b)
    }

    function boundsYDist(bounds) {
      b = new google.maps.LatLng(bounds.getNorthEast().ob, bounds.getSouthWest().pb)
      return google.maps.geometry.spherical.computeDistanceBetween(origin,b)
    }

    shapeLatLngs.forEach(function(latLng){shapeCoordsArr.push(pointCoords(latLng))})

    console.log(JSON.stringify(shapes));
    $("#center").text('center of map: ' + mapCenter.toString())
    $("#results").text('results: ' + JSON.stringify(shapes));
    $("#bounds").text('bounds: ' + bounds);
    $("#bounds-local").text('local bounds: ' + boundsXDist(bounds) + ' meters by ' + boundsYDist(bounds) + ' meters');
    $("#local-coords").text('local coords: ' + JSON.stringify(shapeCoordsArr))

    // TODO: ADD FORM FOR ADDITIONAL POLY INFO
    // $.post("/maps.js",{klag:JSON.stringify(shapes)},"json");
  });

}
google.maps.event.addDomListener(window, 'load', initialize);

$( "#launcherator" ).submit(function( event ) {
  $.post("/maps.js",{polydata:shapes, exclusiondata:exclusionShapes},'json');
});


</script>